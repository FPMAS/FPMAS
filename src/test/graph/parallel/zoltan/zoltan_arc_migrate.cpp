#include "gtest/gtest.h"

#include "communication/communication.h"
#include "graph/parallel/distributed_graph.h"
#include "graph/parallel/zoltan/zoltan_lb.h"
#include "utils/config.h"
#include "graph/parallel/synchro/ghost_data.h"

#include "test_utils/test_utils.h"

using FPMAS::communication::MpiCommunicator;

using FPMAS::graph::parallel::zoltan::utils::write_zoltan_id;

using FPMAS::graph::parallel::zoltan::arc::obj_size_multi_fn;
using FPMAS::graph::parallel::zoltan::arc::pack_obj_multi_fn;

using FPMAS::graph::parallel::DistributedGraph;

using FPMAS::graph::parallel::synchro::GhostData;

class Mpi_ZoltanArcMigrationFunctionsTest : public ::testing::Test {
	protected:
		DistributedGraph<int> dg;

		// Migration
		unsigned int transfer_arc_global_ids[4];
		int sizes[2];
		int idx[2];
		char buf[250];

		// Error code
		int err;

		void SetUp() override {
			dg.buildNode(0, 1., 0);
			dg.buildNode(2, 2., 1);
			dg.buildNode(85250, 3., 2);

			dg.link(0, 2, 0);
			dg.link(2, 0, 1);

			dg.link(0, 85250, 2);


		}

		void write_migration_sizes() {
			// Transfer arcs 0 and 2
			write_zoltan_id(0, &transfer_arc_global_ids[0]);
			write_zoltan_id(2, &transfer_arc_global_ids[2]);

			obj_size_multi_fn<int, DefaultLayer, 1, GhostData>(
					&dg,
					2,
					0,
					2,
					transfer_arc_global_ids,
					nullptr,
					sizes,
					&err
					);
		}

		void write_communication_buffer() {
			// Automatically generated by Zoltan in a real use case
			idx[0] = 0;
			idx[1] = sizes[0] + 1;

			// Unused
			int dest[2];

			pack_obj_multi_fn<int, DefaultLayer, 1, GhostData>(
					&dg,
					2,
					0,
					2,
					transfer_arc_global_ids,
					nullptr,
					dest,
					sizes,
					idx,
					buf,
					&err
					);
		}
};

TEST_F(Mpi_ZoltanArcMigrationFunctionsTest, obj_size_multi_test) {

	write_migration_sizes();

	int current_proc = dg.getMpiCommunicator().getRank();
	json arc0_str = *dg.getArcs().at(0);
	arc0_str["source"] = {current_proc, current_proc};
	arc0_str["target"] = {current_proc, current_proc};
	ASSERT_EQ(sizes[0], arc0_str.dump().size() + 1);

	json arc2_str = *dg.getArcs().at(2);
	arc2_str["source"] = {current_proc, current_proc};
	arc2_str["target"] = {current_proc, current_proc};
	ASSERT_EQ(sizes[1], arc2_str.dump().size() + 1);
}

TEST_F(Mpi_ZoltanArcMigrationFunctionsTest, pack_obj_multi_test) {

	write_migration_sizes();
	write_communication_buffer();

	std::string current_proc = std::to_string(dg.getMpiCommunicator().getRank());

	// Decompose and check buffer data
	ASSERT_STREQ(
		&buf[0],
		std::string(
			R"({"id":0,"layer":0,"link":[0,2],"source":[)" + current_proc + "," + current_proc + "],"
			+ R"("target":[)" + current_proc + "," + current_proc + "]}"
			).c_str()
		);

	ASSERT_STREQ(
		&buf[idx[1]],
		std::string(
			R"({"id":2,"layer":0,"link":[0,85250],"source":[)"
			+ current_proc + "," + current_proc + "],"
			+ R"("target":[)" + current_proc + "," + current_proc + "]}"
			).c_str()
		);
}

using FPMAS::graph::parallel::zoltan::arc::unpack_obj_multi_fn;

/*
 * Unpack test, with source and target nodes of the unpacked arcs contained in
 * the local graph, so that they can be rebuilt normally.
 */
TEST_F(Mpi_ZoltanArcMigrationFunctionsTest, local_nodes_unpack_obj_multi_test) {

	write_migration_sizes();
	write_communication_buffer();

	dg.unlink(0ul);
	dg.unlink(2ul);
	unpack_obj_multi_fn<int, DefaultLayer, 1, GhostData>(
		&dg,
		2,
		2,
		transfer_arc_global_ids,
		sizes,
		idx,
		buf,
		&err);

	ASSERT_EQ(dg.getArcs().size(), 3);

	ASSERT_EQ(dg.getNode(0ul)->getOutgoingArcs().size(), 2);
	ASSERT_EQ(dg.getNode(2ul)->getIncomingArcs().size(), 1);
	ASSERT_EQ(dg.getNode(85250ul)->getIncomingArcs().size(), 1);

	ASSERT_EQ(dg.getNode(2ul)->getIncomingArcs().at(0)->getId(), 0ul);
	ASSERT_EQ(dg.getArc(0ul)->getSourceNode()->getId(), 0ul);
	ASSERT_EQ(dg.getArc(0ul)->getTargetNode()->getId(), 2ul);

	ASSERT_EQ(dg.getNode(85250ul)->getIncomingArcs().at(0)->getId(), 2ul);
	ASSERT_EQ(dg.getArc(2ul)->getSourceNode()->getId(), 0ul);
	ASSERT_EQ(dg.getArc(2ul)->getTargetNode()->getId(), 85250ul);
}

